#include<stdio.h>#include<stdlib.h>#include<string.h>#include<stdbool.h>#include<vulkan/vulkan.h>#include<GLFW/glfw3.h>typedefstruct{floatinPosition[3];//Oruseavec3-likestructifyouhaveone}Vertex;//uniformbufferobjecttypedefstruct{floattime;}UBO;//helpersandprintersandutilitiesvoidenumerateVulkanExtensions(){uint32_textensionCount=0;vkEnumerateInstanceExtensionProperties(NULL,&extensionCount,NULL);VkExtensionProperties*availableExtensions=malloc(extensionCount*sizeof(VkExtensionProperties));vkEnumerateInstanceExtensionProperties(NULL,&extensionCount,availableExtensions);for(uint32_ti=0;i<extensionCount;i++){printf("Availableextension:%s\n",availableExtensions[i].extensionName);}free(availableExtensions);}voidenumerateVulkanLayers(){uint32_tlayerCount;vkEnumerateInstanceLayerProperties(&layerCount,NULL);VkLayerProperties*availableLayers=malloc(layerCount*sizeof(VkLayerProperties));vkEnumerateInstanceLayerProperties(&layerCount,availableLayers);printf("AvailableVulkanlayers:\n");for(uint32_ti=0;i<layerCount;i++){printf("\t%s\n",availableLayers[i].layerName);}free(availableLayers);}voidenumeratePhysicalDevices(VkInstanceinstance){uint32_tdeviceCount=0;vkEnumeratePhysicalDevices(instance,&deviceCount,NULL);if(deviceCount==0){fprintf(stderr,"FailedtofindGPUswithVulkansupport\n");exit(EXIT_FAILURE);}VkPhysicalDevice*devices=malloc(deviceCount*sizeof(VkPhysicalDevice));vkEnumeratePhysicalDevices(instance,&deviceCount,devices);for(uint32_ti=0;i<deviceCount;i++){VkPhysicalDevicedevice=devices[i];VkPhysicalDevicePropertiesdeviceProperties;vkGetPhysicalDeviceProperties(device,&deviceProperties);printf("Device%d:%s\n",i,deviceProperties.deviceName);}free(devices);}boolcheckValidationLayerSupport(){constchar*validationLayers[]={"VK_LAYER_KHRONOS_validation"};uint32_tlayerCount;vkEnumerateInstanceLayerProperties(&layerCount,NULL);VkLayerProperties*availableLayers=(VkLayerProperties*)malloc(layerCount*sizeof(VkLayerProperties));vkEnumerateInstanceLayerProperties(&layerCount,availableLayers);boollayersAvailable=true;for(unsignedlongi=0;i<sizeof(validationLayers)/sizeof(validationLayers[0]);i++){boollayerFound=false;for(uint32_tj=0;j<layerCount;j++){if(strcmp(validationLayers[i],availableLayers[j].layerName)==0){layerFound=true;break;}}if(!layerFound){layersAvailable=false;break;}}free(availableLayers);returnlayersAvailable;}uint32_tfindMemoryType(VkPhysicalDevicephysicalDevice,uint32_ttypeFilter,VkMemoryPropertyFlagsproperties){VkPhysicalDeviceMemoryPropertiesmemProperties;vkGetPhysicalDeviceMemoryProperties(physicalDevice,&memProperties);for(uint32_ti=0;i<memProperties.memoryTypeCount;i++){if((typeFilter&(1<<i))&&(memProperties.memoryTypes[i].propertyFlags&properties)==properties){returni;}}fprintf(stderr,"Failedtofindsuitablememorytype!\n");exit(EXIT_FAILURE);}//initializersandupdatersVkInstancecreateVulkanInstance(){VkInstanceinstance;if(!checkValidationLayerSupport()){fprintf(stderr,"Validationlayersrequested,butnotavailable!\n");enumerateVulkanLayers();exit(EXIT_FAILURE);}//GetrequiredGLFWextensionsuint32_tglfwExtensionCount=0;constchar**glfwExtensions=glfwGetRequiredInstanceExtensions(&glfwExtensionCount);//Calculatetotalnumberofextensions(GLFWextensions+3additional)uint32_ttotalExtensionCount=glfwExtensionCount+17;//setto17forallotheravailableextensionsand3fortheknownneccessaryconstchar**extensions=malloc(totalExtensionCount*sizeof(char*));memcpy(extensions,glfwExtensions,glfwExtensionCount*sizeof(char*));//AddVK_KHR_surfaceandVK_MVK_macos_surfaceextensionsextensions[glfwExtensionCount]="VK_KHR_portability_enumeration";extensions[glfwExtensionCount+1]="VK_KHR_surface";extensions[glfwExtensionCount+2]="VK_MVK_macos_surface";//therestoftheseidunnoifweneedextensions[glfwExtensionCount+3]="VK_KHR_device_group_creation";extensions[glfwExtensionCount+4]="VK_KHR_external_fence_capabilities";extensions[glfwExtensionCount+5]="VK_KHR_external_memory_capabilities";extensions[glfwExtensionCount+6]="VK_KHR_external_semaphore_capabilities";extensions[glfwExtensionCount+7]="VK_KHR_get_physical_device_properties2";extensions[glfwExtensionCount+8]="VK_KHR_get_surface_capabilities2";extensions[glfwExtensionCount+9]="VK_EXT_debug_report";extensions[glfwExtensionCount+10]="VK_EXT_debug_utils";extensions[glfwExtensionCount+11]="VK_EXT_headless_surface";extensions[glfwExtensionCount+12]="VK_EXT_layer_settings";extensions[glfwExtensionCount+13]="VK_EXT_metal_surface";extensions[glfwExtensionCount+14]="VK_EXT_surface_maintenance1";extensions[glfwExtensionCount+15]="VK_EXT_swapchain_colorspace";extensions[glfwExtensionCount+16]="VK_LUNARG_direct_driver_loading";//SetupVulkanapplicationinfoVkApplicationInfoappInfo={0};appInfo.sType=VK_STRUCTURE_TYPE_APPLICATION_INFO;appInfo.pApplicationName="HelloVulkan";appInfo.applicationVersion=VK_MAKE_VERSION(1,0,0);appInfo.pEngineName="NoEngine";appInfo.engineVersion=VK_MAKE_VERSION(1,0,0);appInfo.apiVersion=VK_API_VERSION_1_2;//CreateVulkaninstanceVkInstanceCreateInfocreateInfo={0};createInfo.sType=VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;createInfo.pApplicationInfo=&appInfo;createInfo.enabledExtensionCount=totalExtensionCount;createInfo.ppEnabledExtensionNames=extensions;createInfo.flags=VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR;//Enablevalidationlayersconstchar*validationLayers[]={"VK_LAYER_KHRONOS_validation"};createInfo.enabledLayerCount=sizeof(validationLayers)/sizeof(validationLayers[0]);createInfo.ppEnabledLayerNames=validationLayers;createInfo.flags=VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR;if(vkCreateInstance(&createInfo,NULL,&instance)!=VK_SUCCESS){fprintf(stderr,"FailedtocreateVulkaninstance\n");free(extensions);//Freetheallocatedmemoryforextensionsexit(EXIT_FAILURE);}free(extensions);//Freetheallocatedmemoryforextensionsreturninstance;}VkSurfaceKHRcreateSurface(VkInstanceinstance,GLFWwindow*window){VkSurfaceKHRsurface;if(glfwCreateWindowSurface(instance,window,NULL,&surface)!=VK_SUCCESS){fprintf(stderr,"Failedtocreatewindowsurface\n");exit(EXIT_FAILURE);}returnsurface;}GLFWwindow*createWindow(){if(!glfwInit()){fprintf(stderr,"FailedtoinitializeGLFW\n");exit(EXIT_FAILURE);}glfwWindowHint(GLFW_CLIENT_API,GLFW_NO_API);GLFWwindow*window=glfwCreateWindow(800,600,"VulkanBimbo",NULL,NULL);if(!window){fprintf(stderr,"FailedtocreateGLFWwindow\n");glfwTerminate();exit(EXIT_FAILURE);}returnwindow;}VkPhysicalDeviceselectPhysicalDevice(VkInstanceinstance){uint32_tdeviceCount=0;vkEnumeratePhysicalDevices(instance,&deviceCount,NULL);if(deviceCount==0){fprintf(stderr,"FailedtofindGPUswithVulkansupport\n");exit(EXIT_FAILURE);}VkPhysicalDevice*devices=malloc(deviceCount*sizeof(VkPhysicalDevice));vkEnumeratePhysicalDevices(instance,&deviceCount,devices);VkPhysicalDeviceselectedDevice=VK_NULL_HANDLE;for(uint32_ti=0;i<deviceCount;i++){VkPhysicalDevicedevice=devices[i];VkPhysicalDevicePropertiesdeviceProperties;vkGetPhysicalDeviceProperties(device,&deviceProperties);//PreferdiscreteGPUif(deviceProperties.deviceType==VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU){selectedDevice=device;break;}}//IfnodiscreteGPUfound,justpickthefirstoneif(selectedDevice==VK_NULL_HANDLE&&deviceCount>0){selectedDevice=devices[0];}free(devices);if(selectedDevice==VK_NULL_HANDLE){fprintf(stderr,"FailedtofindasuitableGPU\n");exit(EXIT_FAILURE);}returnselectedDevice;}intfindGraphicsQueueFamilyIndex(VkPhysicalDevicephysicalDevice){uint32_tqueueFamilyCount=0;vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice,&queueFamilyCount,NULL);VkQueueFamilyProperties*queueFamilies=malloc(queueFamilyCount*sizeof(VkQueueFamilyProperties));vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice,&queueFamilyCount,queueFamilies);intgraphicsQueueFamilyIndex=-1;for(uint32_ti=0;i<queueFamilyCount;i++){if(queueFamilies[i].queueFlags&VK_QUEUE_GRAPHICS_BIT){graphicsQueueFamilyIndex=i;break;}}free(queueFamilies);if(graphicsQueueFamilyIndex==-1){fprintf(stderr,"Failedtofindagraphicsqueuefamily\n");exit(EXIT_FAILURE);}returngraphicsQueueFamilyIndex;}VkDevicecreateLogicalDevice(VkPhysicalDevicephysicalDevice,uint32_tgraphicsQueueFamilyIndex,VkQueue*graphicsQueue,VkQueue*presentQueue){floatqueuePriority=1.0f;VkDeviceQueueCreateInfoqueueCreateInfo={0};queueCreateInfo.sType=VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;queueCreateInfo.queueFamilyIndex=graphicsQueueFamilyIndex;queueCreateInfo.queueCount=1;queueCreateInfo.pQueuePriorities=&queuePriority;VkPhysicalDeviceFeaturesdeviceFeatures={0};//Setanyphysicaldevicefeaturesyou'llbeusinghereVkDeviceCreateInfocreateInfo={0};createInfo.sType=VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;createInfo.pQueueCreateInfos=&queueCreateInfo;createInfo.queueCreateInfoCount=1;createInfo.pEnabledFeatures=&deviceFeatures;//Ifyou'reusingspecificdeviceextensions(likeforswapchains),listthemhereconstchar*deviceExtensions[]={VK_KHR_SWAPCHAIN_EXTENSION_NAME,"VK_KHR_portability_subset"};//similarVK_KHR_portability_enumerationsomethingfornon-native(windows)createInfo.enabledExtensionCount=sizeof(deviceExtensions)/sizeof(deviceExtensions[0]);createInfo.ppEnabledExtensionNames=deviceExtensions;VkDevicedevice;if(vkCreateDevice(physicalDevice,&createInfo,NULL,&device)!=VK_SUCCESS){fprintf(stderr,"Failedtocreatelogicaldevice\n");exit(EXIT_FAILURE);}//RetrievethegraphicsqueuevkGetDeviceQueue(device,graphicsQueueFamilyIndex,0,graphicsQueue);vkGetDeviceQueue(device,graphicsQueueFamilyIndex,0,presentQueue);returndevice;}VkSwapchainKHRcreateSwapChain(VkPhysicalDevicephysicalDevice,VkDevicedevice,VkSurfaceKHRsurface,VkExtent2D*swapChainExtent){//QuerySurfaceCapabilitiesVkSurfaceCapabilitiesKHRsurfaceCapabilities;vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice,surface,&surfaceCapabilities);//ChooseaSurfaceFormatuint32_tformatCount;vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice,surface,&formatCount,NULL);VkSurfaceFormatKHR*surfaceFormats=malloc(formatCount*sizeof(VkSurfaceFormatKHR));vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice,surface,&formatCount,surfaceFormats);VkSurfaceFormatKHRchosenFormat=surfaceFormats[0];for(uint32_ti=0;i<formatCount;i++){if(surfaceFormats[i].format==VK_FORMAT_B8G8R8A8_SRGB&&surfaceFormats[i].colorSpace==VK_COLOR_SPACE_SRGB_NONLINEAR_KHR){chosenFormat=surfaceFormats[i];break;}}//SelectaPresentationModeuint32_tpresentModeCount;vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice,surface,&presentModeCount,NULL);VkPresentModeKHR*presentModes=malloc(presentModeCount*sizeof(VkPresentModeKHR));vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice,surface,&presentModeCount,presentModes);VkPresentModeKHRchosenPresentMode=VK_PRESENT_MODE_FIFO_KHR;for(uint32_ti=0;i<presentModeCount;i++){if(presentModes[i]==VK_PRESENT_MODE_MAILBOX_KHR){chosenPresentMode=presentModes[i];break;}}//DetermineSwapExtent*swapChainExtent=surfaceCapabilities.currentExtent;//CreatetheSwapChainVkSwapchainCreateInfoKHRswapChainCreateInfo={0};swapChainCreateInfo.sType=VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;swapChainCreateInfo.surface=surface;swapChainCreateInfo.minImageCount=surfaceCapabilities.minImageCount+1;swapChainCreateInfo.imageFormat=chosenFormat.format;swapChainCreateInfo.imageColorSpace=chosenFormat.colorSpace;swapChainCreateInfo.imageExtent=*swapChainExtent;swapChainCreateInfo.imageArrayLayers=1;swapChainCreateInfo.imageUsage=VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT;swapChainCreateInfo.imageSharingMode=VK_SHARING_MODE_EXCLUSIVE;swapChainCreateInfo.preTransform=surfaceCapabilities.currentTransform;swapChainCreateInfo.compositeAlpha=VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR;swapChainCreateInfo.presentMode=chosenPresentMode;swapChainCreateInfo.clipped=VK_TRUE;swapChainCreateInfo.oldSwapchain=VK_NULL_HANDLE;VkSwapchainKHRswapChain;if(vkCreateSwapchainKHR(device,&swapChainCreateInfo,NULL,&swapChain)!=VK_SUCCESS){fprintf(stderr,"Failedtocreateswapchain\n");exit(EXIT_FAILURE);}//Cleanupfree(surfaceFormats);free(presentModes);returnswapChain;}VkSurfaceFormatKHRchooseSwapSurfaceFormat(VkPhysicalDevicephysicalDevice,VkSurfaceKHRsurface){uint32_tformatCount;vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice,surface,&formatCount,NULL);VkSurfaceFormatKHR*formats=malloc(formatCount*sizeof(VkSurfaceFormatKHR));vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice,surface,&formatCount,formats);VkSurfaceFormatKHRchosenFormat=formats[0];for(uint32_ti=0;i<formatCount;i++){if(formats[i].format==VK_FORMAT_B8G8R8A8_SRGB&&formats[i].colorSpace==VK_COLOR_SPACE_SRGB_NONLINEAR_KHR){chosenFormat=formats[i];break;}}free(formats);returnchosenFormat;}VkImageView*createImageViews(VkDevicedevice,VkSwapchainKHRswapChain,VkFormatswapChainImageFormat,uint32_t*swapChainImageCount){//GetthenumberofimagesintheswapchainvkGetSwapchainImagesKHR(device,swapChain,swapChainImageCount,NULL);VkImage*swapChainImages=malloc(*swapChainImageCount*sizeof(VkImage));vkGetSwapchainImagesKHR(device,swapChain,swapChainImageCount,swapChainImages);//AllocateanarrayofimageviewsVkImageView*swapChainImageViews=malloc(*swapChainImageCount*sizeof(VkImageView));for(uint32_ti=0;i<*swapChainImageCount;i++){VkImageViewCreateInfocreateInfo={0};createInfo.sType=VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;createInfo.image=swapChainImages[i];createInfo.viewType=VK_IMAGE_VIEW_TYPE_2D;createInfo.format=swapChainImageFormat;createInfo.components.r=VK_COMPONENT_SWIZZLE_IDENTITY;createInfo.components.g=VK_COMPONENT_SWIZZLE_IDENTITY;createInfo.components.b=VK_COMPONENT_SWIZZLE_IDENTITY;createInfo.components.a=VK_COMPONENT_SWIZZLE_IDENTITY;createInfo.subresourceRange.aspectMask=VK_IMAGE_ASPECT_COLOR_BIT;createInfo.subresourceRange.baseMipLevel=0;createInfo.subresourceRange.levelCount=1;createInfo.subresourceRange.baseArrayLayer=0;createInfo.subresourceRange.layerCount=1;if(vkCreateImageView(device,&createInfo,NULL,&swapChainImageViews[i])!=VK_SUCCESS){fprintf(stderr,"Failedtocreateimageviews\n");exit(EXIT_FAILURE);}}free(swapChainImages);returnswapChainImageViews;}VkRenderPasscreateRenderPass(VkDevicedevice,VkFormatswapChainImageFormat){VkAttachmentDescriptioncolorAttachment={0};colorAttachment.format=swapChainImageFormat;colorAttachment.samples=VK_SAMPLE_COUNT_1_BIT;colorAttachment.loadOp=VK_ATTACHMENT_LOAD_OP_CLEAR;colorAttachment.storeOp=VK_ATTACHMENT_STORE_OP_STORE;colorAttachment.stencilLoadOp=VK_ATTACHMENT_LOAD_OP_DONT_CARE;colorAttachment.stencilStoreOp=VK_ATTACHMENT_STORE_OP_DONT_CARE;colorAttachment.initialLayout=VK_IMAGE_LAYOUT_UNDEFINED;colorAttachment.finalLayout=VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;VkAttachmentReferencecolorAttachmentRef={0};colorAttachmentRef.attachment=0;colorAttachmentRef.layout=VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;VkSubpassDescriptionsubpass={0};subpass.pipelineBindPoint=VK_PIPELINE_BIND_POINT_GRAPHICS;subpass.colorAttachmentCount=1;subpass.pColorAttachments=&colorAttachmentRef;VkRenderPassCreateInforenderPassInfo={0};renderPassInfo.sType=VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO;renderPassInfo.attachmentCount=1;renderPassInfo.pAttachments=&colorAttachment;renderPassInfo.subpassCount=1;renderPassInfo.pSubpasses=&subpass;VkRenderPassrenderPass;if(vkCreateRenderPass(device,&renderPassInfo,NULL,&renderPass)!=VK_SUCCESS){fprintf(stderr,"Failedtocreaterenderpass\n");exit(EXIT_FAILURE);}returnrenderPass;}char*loadShaderCode(constchar*filename,size_t*fileSize){FILE*file=fopen(filename,"rb");if(!file){fprintf(stderr,"Failedtoopenshaderfile%s\n",filename);exit(EXIT_FAILURE);}fseek(file,0,SEEK_END);*fileSize=ftell(file);rewind(file);char*buffer=malloc(*fileSize);if(!buffer){fprintf(stderr,"Failedtoallocatememoryforshaderfile%s\n",filename);fclose(file);exit(EXIT_FAILURE);}fread(buffer,1,*fileSize,file);fclose(file);returnbuffer;}VkShaderModulecreateShaderModule(VkDevicedevice,constchar*code,size_tcodeSize){VkShaderModuleCreateInfocreateInfo={0};createInfo.sType=VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;createInfo.codeSize=codeSize;createInfo.pCode=(constuint32_t*)code;VkShaderModuleshaderModule;if(vkCreateShaderModule(device,&createInfo,NULL,&shaderModule)!=VK_SUCCESS){fprintf(stderr,"Failedtocreateshadermodule\n");exit(EXIT_FAILURE);}returnshaderModule;}VkPipelineLayoutcreatePipelineLayout(VkDevicedevice,VkDescriptorSetLayout*descriptorSetLayouts,uint32_tdescriptorSetLayoutCount){VkPipelineLayoutpipelineLayout;VkPipelineLayoutCreateInfopipelineLayoutInfo={0};pipelineLayoutInfo.sType=VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;pipelineLayoutInfo.setLayoutCount=descriptorSetLayoutCount;//Canbe0ifnodescriptorsetsareusedpipelineLayoutInfo.pSetLayouts=descriptorSetLayouts;//CanbeNULLifnodescriptorsetsareusedif(vkCreatePipelineLayout(device,&pipelineLayoutInfo,NULL,&pipelineLayout)!=VK_SUCCESS){fprintf(stderr,"Failedtocreatepipelinelayout\n");exit(EXIT_FAILURE);}returnpipelineLayout;}VkPipelinecreateGraphicsPipeline(VkDevicedevice,VkExtent2DswapChainExtent,VkRenderPassrenderPass,VkPipelineLayoutpipelineLayout,constchar*vertShaderCode,size_tvertShaderSize,constchar*fragShaderCode,size_tfragShaderSize){//CreateshadermodulesVkShaderModulevertexShaderModule=createShaderModule(device,vertShaderCode,vertShaderSize);VkShaderModulefragmentShaderModule=createShaderModule(device,fragShaderCode,fragShaderSize);VkPipelineShaderStageCreateInfovertShaderStageInfo={0};vertShaderStageInfo.sType=VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;vertShaderStageInfo.stage=VK_SHADER_STAGE_VERTEX_BIT;vertShaderStageInfo.module=vertexShaderModule;vertShaderStageInfo.pName="main";//MakesurethismatchestheentrypointinyourshaderVkPipelineShaderStageCreateInfofragShaderStageInfo={0};fragShaderStageInfo.sType=VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;fragShaderStageInfo.stage=VK_SHADER_STAGE_FRAGMENT_BIT;fragShaderStageInfo.module=fragmentShaderModule;fragShaderStageInfo.pName="main";//MakesurethismatchestheentrypointinyourshaderVkPipelineShaderStageCreateInfoshaderStages[]={vertShaderStageInfo,fragShaderStageInfo};//fixed-functionstages//descriptionVkVertexInputBindingDescriptionbindingDescription={0};bindingDescription.binding=0;//Thebindingindex(usedinthevertexbuffer)bindingDescription.stride=sizeof(Vertex);//SizeofasinglevertexobjectbindingDescription.inputRate=VK_VERTEX_INPUT_RATE_VERTEX;//attributesVkVertexInputAttributeDescriptionattributeDescriptions[2]={0};attributeDescriptions[0].binding=0;//MatchesthebindinginthebindingDescriptionattributeDescriptions[0].location=0;//Locationintheshader(layout(location=0))attributeDescriptions[0].format=VK_FORMAT_R32G32B32_SFLOAT;//Formatforvec3(3floats)attributeDescriptions[0].offset=offsetof(Vertex,inPosition);//Offsetof'inPosition'withintheVertexstruct//vertexbindingVkPipelineVertexInputStateCreateInfovertexInputInfo={0};vertexInputInfo.sType=VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;vertexInputInfo.vertexBindingDescriptionCount=1;vertexInputInfo.pVertexBindingDescriptions=&bindingDescription;vertexInputInfo.vertexAttributeDescriptionCount=1;vertexInputInfo.pVertexAttributeDescriptions=attributeDescriptions;//InputAssemblyVkPipelineInputAssemblyStateCreateInfoinputAssembly={0};inputAssembly.sType=VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;inputAssembly.topology=VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;inputAssembly.primitiveRestartEnable=VK_FALSE;//ViewportsandScissorsVkViewportviewport={0};VkRect2Dscissor={0};viewport.x=0.0f;viewport.y=0.0f;viewport.width=(float)swapChainExtent.width;viewport.height=(float)swapChainExtent.height;viewport.minDepth=0.0f;viewport.maxDepth=1.0f;scissor.offset.x=0;scissor.offset.y=0;scissor.extent=swapChainExtent;VkPipelineViewportStateCreateInfoviewportState={0};viewportState.sType=VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;viewportState.viewportCount=1;viewportState.pViewports=&viewport;viewportState.scissorCount=1;viewportState.pScissors=&scissor;//RasterizerVkPipelineRasterizationStateCreateInforasterizer={0};rasterizer.sType=VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;rasterizer.depthClampEnable=VK_FALSE;rasterizer.rasterizerDiscardEnable=VK_FALSE;rasterizer.polygonMode=VK_POLYGON_MODE_FILL;rasterizer.lineWidth=1.0f;rasterizer.cullMode=VK_CULL_MODE_BACK_BIT;//rasterizer.cullMode=VK_CULL_MODE_NONE;//todisableculling/rasterizer.frontFace=VK_FRONT_FACE_CLOCKWISE;rasterizer.depthBiasEnable=VK_FALSE;//MultisamplingVkPipelineMultisampleStateCreateInfomultisampling={0};multisampling.sType=VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;multisampling.sampleShadingEnable=VK_FALSE;multisampling.rasterizationSamples=VK_SAMPLE_COUNT_1_BIT;//ColorBlendingVkPipelineColorBlendAttachmentStatecolorBlendAttachment={0};colorBlendAttachment.colorWriteMask=VK_COLOR_COMPONENT_R_BIT|VK_COLOR_COMPONENT_G_BIT|VK_COLOR_COMPONENT_B_BIT|VK_COLOR_COMPONENT_A_BIT;colorBlendAttachment.blendEnable=VK_FALSE;VkPipelineColorBlendStateCreateInfocolorBlending={0};colorBlending.sType=VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;colorBlending.logicOpEnable=VK_FALSE;colorBlending.logicOp=VK_LOGIC_OP_COPY;colorBlending.attachmentCount=1;colorBlending.pAttachments=&colorBlendAttachment;colorBlending.blendConstants[0]=0.0f;colorBlending.blendConstants[1]=0.0f;colorBlending.blendConstants[2]=0.0f;colorBlending.blendConstants[3]=0.0f;//GraphicsPipelineCreationVkGraphicsPipelineCreateInfopipelineInfo={0};pipelineInfo.sType=VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;pipelineInfo.stageCount=2;pipelineInfo.pStages=shaderStages;pipelineInfo.pVertexInputState=&vertexInputInfo;pipelineInfo.pInputAssemblyState=&inputAssembly;pipelineInfo.pViewportState=&viewportState;pipelineInfo.pRasterizationState=&rasterizer;pipelineInfo.pMultisampleState=&multisampling;pipelineInfo.pColorBlendState=&colorBlending;pipelineInfo.layout=pipelineLayout;//AssumesapipelineLayoutvariableisdefinedpipelineInfo.renderPass=renderPass;pipelineInfo.subpass=0;pipelineInfo.basePipelineHandle=VK_NULL_HANDLE;pipelineInfo.basePipelineIndex=-1;pipelineInfo.renderPass=renderPass;pipelineInfo.subpass=0;//TODO:Ifyouareusingapipelinelayout,setithere.pipelineInfo.layout=pipelineLayout;VkPipelinegraphicsPipeline;if(vkCreateGraphicsPipelines(device,VK_NULL_HANDLE,1,&pipelineInfo,NULL,&graphicsPipeline)!=VK_SUCCESS){fprintf(stderr,"Failedtocreategraphicspipeline\n");exit(EXIT_FAILURE);}//CleanupshadermodulesafterpipelinecreationvkDestroyShaderModule(device,vertexShaderModule,NULL);vkDestroyShaderModule(device,fragmentShaderModule,NULL);returngraphicsPipeline;}voidcreateUniformBuffers(VkDevicedevice,VkPhysicalDevicephysicalDevice,uint32_tbufferCount,VkBuffer*uniformBuffers,VkDeviceMemory*uniformBufferMemory){VkDeviceSizebufferSize=sizeof(UBO);//AssumingUBOisyourUniformBufferObjectstructurefor(uint32_ti=0;i<bufferCount;++i){//CreatethebufferVkBufferCreateInfobufferInfo={0};bufferInfo.sType=VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;bufferInfo.size=bufferSize;bufferInfo.usage=VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT;bufferInfo.sharingMode=VK_SHARING_MODE_EXCLUSIVE;if(vkCreateBuffer(device,&bufferInfo,NULL,&uniformBuffers[i])!=VK_SUCCESS){fprintf(stderr,"Failedtocreateuniformbuffer\n");exit(EXIT_FAILURE);}//AllocatememoryforthebufferVkMemoryRequirementsmemRequirements;vkGetBufferMemoryRequirements(device,uniformBuffers[i],&memRequirements);VkMemoryAllocateInfoallocInfo={0};allocInfo.sType=VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;allocInfo.allocationSize=memRequirements.size;allocInfo.memoryTypeIndex=findMemoryType(physicalDevice,memRequirements.memoryTypeBits,VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT|VK_MEMORY_PROPERTY_HOST_COHERENT_BIT);if(vkAllocateMemory(device,&allocInfo,NULL,&uniformBufferMemory[i])!=VK_SUCCESS){fprintf(stderr,"Failedtoallocateuniformbuffermemory\n");exit(EXIT_FAILURE);}vkBindBufferMemory(device,uniformBuffers[i],uniformBufferMemory[i],0);}}voidupdateUniformBuffer(VkDevicedevice,VkDeviceMemoryuniformBufferMemory,doubletime){UBOubo={time};void*data;vkMapMemory(device,uniformBufferMemory,0,sizeof(ubo),0,&data);memcpy(data,&ubo,sizeof(ubo));vkUnmapMemory(device,uniformBufferMemory);}VkFramebuffer*createFramebuffers(VkDevicedevice,VkImageView*swapChainImageViews,uint32_tswapChainImageCount,VkExtent2DswapChainExtent,VkRenderPassrenderPass){VkFramebuffer*swapChainFramebuffers=malloc(swapChainImageCount*sizeof(VkFramebuffer));for(size_ti=0;i<swapChainImageCount;i++){VkImageViewattachments[]={swapChainImageViews[i]};VkFramebufferCreateInfoframebufferInfo={0};framebufferInfo.sType=VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;framebufferInfo.renderPass=renderPass;framebufferInfo.attachmentCount=1;framebufferInfo.pAttachments=attachments;framebufferInfo.width=swapChainExtent.width;framebufferInfo.height=swapChainExtent.height;framebufferInfo.layers=1;if(vkCreateFramebuffer(device,&framebufferInfo,NULL,&swapChainFramebuffers[i])!=VK_SUCCESS){fprintf(stderr,"Failedtocreateframebuffer\n");exit(EXIT_FAILURE);}}returnswapChainFramebuffers;}VkCommandPoolcreateCommandPool(VkDevicedevice,uint32_tgraphicsQueueFamilyIndex){VkCommandPoolcommandPool;VkCommandPoolCreateInfopoolInfo={0};poolInfo.sType=VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;poolInfo.flags=VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT;poolInfo.queueFamilyIndex=graphicsQueueFamilyIndex;if(vkCreateCommandPool(device,&poolInfo,NULL,&commandPool)!=VK_SUCCESS){fprintf(stderr,"Failedtocreatecommandpool\n");exit(EXIT_FAILURE);}returncommandPool;}VkCommandBuffer*allocateCommandBuffers(VkDevicedevice,VkCommandPoolcommandPool,uint32_tswapChainImageCount){VkCommandBuffer*commandBuffers=malloc(swapChainImageCount*sizeof(VkCommandBuffer));VkCommandBufferAllocateInfoallocInfo={0};allocInfo.sType=VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;allocInfo.commandPool=commandPool;allocInfo.level=VK_COMMAND_BUFFER_LEVEL_PRIMARY;allocInfo.commandBufferCount=swapChainImageCount;if(vkAllocateCommandBuffers(device,&allocInfo,commandBuffers)!=VK_SUCCESS){fprintf(stderr,"Failedtoallocatecommandbuffers\n");exit(EXIT_FAILURE);}returncommandBuffers;}voidrecordCommandBuffers(VkCommandBuffer*commandBuffers,uint32_timageIndex,VkRenderPassrenderPass,VkExtent2DswapChainExtent,VkFramebuffer*swapChainFramebuffers,VkPipelinegraphicsPipeline,VkBuffervertexBuffer,VkBufferindexBuffer,uint32_tindexCount,VkDescriptorSet*descriptorSets,VkPipelineLayoutpipelineLayout){vkResetCommandBuffer(commandBuffers[imageIndex],0);VkCommandBufferBeginInfobeginInfo={0};beginInfo.sType=VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;beginInfo.flags=VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT;beginInfo.pInheritanceInfo=NULL;if(vkBeginCommandBuffer(commandBuffers[imageIndex],&beginInfo)!=VK_SUCCESS){fprintf(stderr,"Failedtobeginrecordingcommandbufferatindex%u\n",imageIndex);exit(EXIT_FAILURE);}//BeginrenderpassVkRenderPassBeginInforenderPassInfo={0};renderPassInfo.sType=VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;renderPassInfo.renderPass=renderPass;renderPassInfo.framebuffer=swapChainFramebuffers[imageIndex];renderPassInfo.renderArea.offset=(VkOffset2D){0,0};renderPassInfo.renderArea.extent=swapChainExtent;VkClearValueclearColor={{{0.0f,0.0f,0.0f,1.0f}}};renderPassInfo.clearValueCount=1;renderPassInfo.pClearValues=&clearColor;vkCmdBeginRenderPass(commandBuffers[imageIndex],&renderPassInfo,VK_SUBPASS_CONTENTS_INLINE);//BindthepipelineandvertexbuffervkCmdBindPipeline(commandBuffers[imageIndex],VK_PIPELINE_BIND_POINT_GRAPHICS,graphicsPipeline);VkBuffervertexBuffers[]={vertexBuffer};VkDeviceSizeoffsets[]={0};vkCmdBindVertexBuffers(commandBuffers[imageIndex],0,1,vertexBuffers,offsets);//BindtheindexbuffervkCmdBindIndexBuffer(commandBuffers[imageIndex],indexBuffer,0,VK_INDEX_TYPE_UINT16);//Assuminguint16_tindices//BinddescriptorsetvkCmdBindDescriptorSets(commandBuffers[imageIndex],VK_PIPELINE_BIND_POINT_GRAPHICS,pipelineLayout,0,1,&descriptorSets[imageIndex],0,NULL);//IssuetheindexeddrawcallvkCmdDrawIndexed(commandBuffers[imageIndex],indexCount,1,0,0,0);//EndtherenderpassvkCmdEndRenderPass(commandBuffers[imageIndex]);//Endthecommandbufferif(vkEndCommandBuffer(commandBuffers[imageIndex])!=VK_SUCCESS){fprintf(stderr,"Failedtoendrecordingcommandbufferatindex%u\n",imageIndex);exit(EXIT_FAILURE);}}VkDescriptorSet*createDescriptorSets(VkDevicedevice,VkDescriptorPooldescriptorPool,VkDescriptorSetLayoutdescriptorSetLayout,VkBuffer*uniformBuffers,uint32_tdescriptorSetCount){VkDescriptorSet*descriptorSets=malloc(descriptorSetCount*sizeof(VkDescriptorSet));//CreateanarrayofdescriptorsetlayoutsforallocationVkDescriptorSetLayout*layouts=malloc(descriptorSetCount*sizeof(VkDescriptorSetLayout));for(uint32_ti=0;i<descriptorSetCount;++i){layouts[i]=descriptorSetLayout;}//DescriptorsetallocateinfoVkDescriptorSetAllocateInfoallocInfo={0};allocInfo.sType=VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;allocInfo.descriptorPool=descriptorPool;allocInfo.descriptorSetCount=descriptorSetCount;allocInfo.pSetLayouts=layouts;//Allocatedescriptorsetsif(vkAllocateDescriptorSets(device,&allocInfo,descriptorSets)!=VK_SUCCESS){fprintf(stderr,"Failedtoallocatedescriptorsets\n");exit(EXIT_FAILURE);}//Configureeachdescriptorsettoreferencetheappropriateuniformbufferfor(uint32_ti=0;i<descriptorSetCount;++i){VkDescriptorBufferInfobufferInfo={0};bufferInfo.buffer=uniformBuffers[i];bufferInfo.offset=0;bufferInfo.range=sizeof(UBO);VkWriteDescriptorSetdescriptorWrite={0};descriptorWrite.sType=VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;descriptorWrite.dstSet=descriptorSets[i];descriptorWrite.dstBinding=0;descriptorWrite.dstArrayElement=0;descriptorWrite.descriptorType=VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;descriptorWrite.descriptorCount=1;descriptorWrite.pBufferInfo=&bufferInfo;vkUpdateDescriptorSets(device,1,&descriptorWrite,0,NULL);}free(layouts);returndescriptorSets;}VkDescriptorSetLayoutcreateDescriptorSetLayout(VkDevicedevice){VkDescriptorSetLayoutBindinguboLayoutBinding={0};uboLayoutBinding.binding=0;uboLayoutBinding.descriptorType=VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;uboLayoutBinding.descriptorCount=1;uboLayoutBinding.stageFlags=VK_SHADER_STAGE_VERTEX_BIT;//orVK_SHADER_STAGE_FRAGMENT_BIT,etc.,dependingonyourneedsuboLayoutBinding.pImmutableSamplers=NULL;//OptionalVkDescriptorSetLayoutCreateInfolayoutInfo={0};layoutInfo.sType=VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;layoutInfo.bindingCount=1;layoutInfo.pBindings=&uboLayoutBinding;VkDescriptorSetLayoutdescriptorSetLayout;if(vkCreateDescriptorSetLayout(device,&layoutInfo,NULL,&descriptorSetLayout)!=VK_SUCCESS){fprintf(stderr,"Failedtocreatedescriptorsetlayout\n");exit(EXIT_FAILURE);}returndescriptorSetLayout;}VkDescriptorPoolcreateDescriptorPool(VkDevicedevice,uint32_tnumDescriptorSets){VkDescriptorPoolSizepoolSize={0};poolSize.type=VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER;poolSize.descriptorCount=numDescriptorSets;//TotalnumberofuniformbufferdescriptorsVkDescriptorPoolCreateInfopoolInfo={0};poolInfo.sType=VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;poolInfo.poolSizeCount=1;poolInfo.pPoolSizes=&poolSize;poolInfo.maxSets=numDescriptorSets;//TotalnumberofdescriptorsetsVkDescriptorPooldescriptorPool;if(vkCreateDescriptorPool(device,&poolInfo,NULL,&descriptorPool)!=VK_SUCCESS){fprintf(stderr,"Failedtocreatedescriptorpool\n");exit(EXIT_FAILURE);}returndescriptorPool;}voidcreateBuffer(VkDevicedevice,VkPhysicalDevicephysicalDevice,VkDeviceSizesize,VkBufferUsageFlagsusage,VkMemoryPropertyFlagsproperties,VkBuffer*buffer,VkDeviceMemory*bufferMemory){VkBufferCreateInfobufferInfo={0};bufferInfo.sType=VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;bufferInfo.size=size;bufferInfo.usage=usage;bufferInfo.sharingMode=VK_SHARING_MODE_EXCLUSIVE;if(vkCreateBuffer(device,&bufferInfo,NULL,buffer)!=VK_SUCCESS){fprintf(stderr,"Failedtocreatebuffer\n");exit(EXIT_FAILURE);}VkMemoryRequirementsmemRequirements;vkGetBufferMemoryRequirements(device,*buffer,&memRequirements);VkMemoryAllocateInfoallocInfo={0};allocInfo.sType=VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;allocInfo.allocationSize=memRequirements.size;allocInfo.memoryTypeIndex=findMemoryType(physicalDevice,memRequirements.memoryTypeBits,properties);if(vkAllocateMemory(device,&allocInfo,NULL,bufferMemory)!=VK_SUCCESS){fprintf(stderr,"Failedtoallocatebuffermemory\n");exit(EXIT_FAILURE);}vkBindBufferMemory(device,*buffer,*bufferMemory,0);}voidcopyDataToDeviceMemory(VkDevicedevice,VkDeviceMemorydeviceMemory,constvoid*data,VkDeviceSizesize){void*mappedMemory;vkMapMemory(device,deviceMemory,0,size,0,&mappedMemory);memcpy(mappedMemory,data,size);vkUnmapMemory(device,deviceMemory);}voidcreateVertexBuffer(VkDevicedevice,VkPhysicalDevicephysicalDevice,VkBuffer*vertexBuffer,VkDeviceMemory*vertexBufferMemory){constVertexvertices[]={//Frontface{{-0.5f,-0.5f,0.5f}},//Vertex0{{0.5f,-0.5f,0.5f}},//Vertex1{{0.5f,0.5f,0.5f}},//Vertex2{{-0.5f,0.5f,0.5f}},//Vertex3//Backface{{-0.5f,-0.5f,-0.5f}},//Vertex4{{0.5f,-0.5f,-0.5f}},//Vertex5{{0.5f,0.5f,-0.5f}},//Vertex6{{-0.5f,0.5f,-0.5f}},//Vertex7};constuint32_tvertexCount=sizeof(vertices)/sizeof(vertices[0]);VkDeviceSizevertexBufferSize=sizeof(Vertex)*vertexCount;//CreatevertexbuffercreateBuffer(device,physicalDevice,vertexBufferSize,VK_BUFFER_USAGE_VERTEX_BUFFER_BIT,VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT|VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,vertexBuffer,vertexBufferMemory);//CopyvertexdatatovertexbuffercopyDataToDeviceMemory(device,*vertexBufferMemory,vertices,vertexBufferSize);}voidcreateIndexBuffer(VkDevicedevice,VkPhysicalDevicephysicalDevice,VkBuffer*indexBuffer,VkDeviceMemory*indexBufferMemory,uint32_t*indexCount){constuint16_tindices[]={0,1,2,2,3,0,//Frontface1,5,6,6,2,1,//Rightface5,4,7,7,6,5,//Backface4,0,3,3,7,4,//Leftface3,2,6,6,7,3,//Topface0,1,5,5,4,0//Bottomface};*indexCount=sizeof(indices)/sizeof(indices[0]);VkDeviceSizeindexBufferSize=sizeof(uint16_t)*(*indexCount);//CreateindexbuffercreateBuffer(device,physicalDevice,indexBufferSize,VK_BUFFER_USAGE_INDEX_BUFFER_BIT,VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT|VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,indexBuffer,indexBufferMemory);//CopyindexdatatoindexbuffercopyDataToDeviceMemory(device,*indexBufferMemory,indices,indexBufferSize);}voidcreateSyncObjects(VkDevicedevice,uint32_tmaxFramesInFlight,VkSemaphore**imageAvailableSemaphores,VkSemaphore**renderFinishedSemaphores,VkFence**inFlightFences){*imageAvailableSemaphores=malloc(sizeof(VkSemaphore)*maxFramesInFlight);*renderFinishedSemaphores=malloc(sizeof(VkSemaphore)*maxFramesInFlight);*inFlightFences=malloc(sizeof(VkFence)*maxFramesInFlight);VkSemaphoreCreateInfosemaphoreInfo={0};semaphoreInfo.sType=VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;VkFenceCreateInfofenceInfo={0};fenceInfo.sType=VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;fenceInfo.flags=VK_FENCE_CREATE_SIGNALED_BIT;//Initializefencesinthesignaledstatefor(size_ti=0;i<maxFramesInFlight;i++){if(vkCreateSemaphore(device,&semaphoreInfo,NULL,&((*imageAvailableSemaphores)[i]))!=VK_SUCCESS||vkCreateSemaphore(device,&semaphoreInfo,NULL,&((*renderFinishedSemaphores)[i]))!=VK_SUCCESS||vkCreateFence(device,&fenceInfo,NULL,&((*inFlightFences)[i]))!=VK_SUCCESS){fprintf(stderr,"Failedtocreatesynchronizationobjectsforaframe\n");exit(EXIT_FAILURE);}}}intmain(){//initialization/creationprocesstotheend://initialize_window=>vulkan_instance=>vulkan_surface=>physical_device=>find_graphics_queue_family_index(notreallyinit/creation)=>logical_device=>choose_swap_surface_format(notreallyinit/creation)=>swap_chain=>image_views=>render_pass=>loadshaders(frag+vert)(notreallyinit)=>uboinitialization/descriptorsetting=>graphics_pipeline=>frame_buffers=>command_buffers=>command_pool=>vertex_buffer=>sync_objects=>index_buffer=>main_loop=>cleanup//tdlr:window,Vulkaninstance,physicaldevice,logicaldevice,swapchain,imageviews,renderpass,ubo,graphicspipeline,framebuffer,commandpool,commandbuffer,vertexbuffer,indexbuffer,syncobject,mainloop,cleanupsetenv("MVK_CONFIG_LOG_LEVEL","2",1);//1meansoverwriteexistingvaluesetenv("MVK_DEBUG","1",1);VkQueuegraphicsQueue,presentQueue;uint32_tswapChainImageCount;VkExtent2DswapChainExtent;//enumerateVulkanExtensions();GLFWwindow*window=createWindow();VkInstanceinstance=createVulkanInstance();VkSurfaceKHRsurface=createSurface(instance,window);//enumeratePhysicalDevices(instance);VkPhysicalDevicephysicalDevice=selectPhysicalDevice(instance);uint32_tgraphicsQueueFamilyIndex=findGraphicsQueueFamilyIndex(physicalDevice);VkDevicedevice=createLogicalDevice(physicalDevice,graphicsQueueFamilyIndex,&graphicsQueue,&presentQueue);VkSurfaceFormatKHRchosenFormat=chooseSwapSurfaceFormat(physicalDevice,surface);VkSwapchainKHRswapChain=createSwapChain(physicalDevice,device,surface,&swapChainExtent);VkImageView*swapChainImageViews=createImageViews(device,swapChain,chosenFormat.format,&swapChainImageCount);VkRenderPassrenderPass=createRenderPass(device,chosenFormat.format);size_tvertexShaderSize,fragmentShaderSize;//Loadtheshadercodefromspvfilesin./shaderssub-directorychar*vertexShaderCode=loadShaderCode("./shaders/vertex_shader.spv",&vertexShaderSize);char*fragmentShaderCode=loadShaderCode("./shaders/fragment_shader.spv",&fragmentShaderSize);//Unifiedbufferobjectsetup(donotmistaketheuniformbufferwiththevertexbufferandthelayoutdescriptorwiththeattributeandbindingdescriptor)VkBufferuniformBuffers[swapChainImageCount];VkDeviceMemoryuniformBufferMemory[swapChainImageCount];createUniformBuffers(device,physicalDevice,swapChainImageCount,uniformBuffers,uniformBufferMemory);VkDescriptorSetLayoutdescriptorSetLayout=createDescriptorSetLayout(device);VkDescriptorPooldescriptorPool=createDescriptorPool(device,swapChainImageCount);VkDescriptorSet*descriptorSets=createDescriptorSets(device,descriptorPool,descriptorSetLayout,uniformBuffers,swapChainImageCount);//pipelinelayoutcreationandandactualpipelinecreation(notethedescriptorforbindingsandattributesnotthesameaslayoutdescriptor)VkPipelineLayoutpipelineLayout=createPipelineLayout(device,&descriptorSetLayout,1);VkPipelinegraphicsPipeline=createGraphicsPipeline(device,swapChainExtent,renderPass,pipelineLayout,vertexShaderCode,vertexShaderSize,fragmentShaderCode,fragmentShaderSize);//Framebuffers,CommandPool,CommandBuffers,VertexBuffer,SynchronizationObjectsVkFramebuffer*swapChainFramebuffers=createFramebuffers(device,swapChainImageViews,swapChainImageCount,swapChainExtent,renderPass);VkCommandPoolcommandPool=createCommandPool(device,graphicsQueueFamilyIndex);VkCommandBuffer*commandBuffers=allocateCommandBuffers(device,commandPool,swapChainImageCount);//vertexbuffers,indexbuffersVkBuffervertexBuffer,indexBuffer;VkDeviceMemoryvertexBufferMemory,indexBufferMemory;uint32_tindexCount;createIndexBuffer(device,physicalDevice,&indexBuffer,&indexBufferMemory,&indexCount);createVertexBuffer(device,physicalDevice,&vertexBuffer,&vertexBufferMemory);//semaphore,fenceandsyncobjectsconstintMAX_FRAMES_IN_FLIGHT=2;VkSemaphore*imageAvailableSemaphores;VkSemaphore*renderFinishedSemaphores;VkFence*inFlightFences;createSyncObjects(device,MAX_FRAMES_IN_FLIGHT,&imageAvailableSemaphores,&renderFinishedSemaphores,&inFlightFences);size_tcurrentFrame=0;//Mainloopwhile(!glfwWindowShouldClose(window)){glfwPollEvents();//WaitforthepreviousframetofinishvkWaitForFences(device,1,&inFlightFences[currentFrame],VK_TRUE,UINT64_MAX);vkResetFences(device,1,&inFlightFences[currentFrame]);doublecurrentTime=glfwGetTime();//1.Acquireanimagefromtheswapchainuint32_timageIndex;vkAcquireNextImageKHR(device,swapChain,UINT64_MAX,imageAvailableSemaphores[currentFrame],VK_NULL_HANDLE,&imageIndex);updateUniformBuffer(device,uniformBufferMemory[imageIndex],currentTime);//UpdatetheUBOrecordCommandBuffers(commandBuffers,imageIndex,renderPass,swapChainExtent,swapChainFramebuffers,graphicsPipeline,vertexBuffer,indexBuffer,indexCount,descriptorSets,pipelineLayout);//2.SubmitthecommandbufferVkSubmitInfosubmitInfo={0};submitInfo.sType=VK_STRUCTURE_TYPE_SUBMIT_INFO;VkSemaphorewaitSemaphores[]={imageAvailableSemaphores[currentFrame]};VkPipelineStageFlagswaitStages[]={VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT};submitInfo.waitSemaphoreCount=1;submitInfo.pWaitSemaphores=waitSemaphores;submitInfo.pWaitDstStageMask=waitStages;submitInfo.commandBufferCount=1;submitInfo.pCommandBuffers=&commandBuffers[imageIndex];VkSemaphoresignalSemaphores[]={renderFinishedSemaphores[currentFrame]};submitInfo.signalSemaphoreCount=1;submitInfo.pSignalSemaphores=signalSemaphores;if(vkQueueSubmit(graphicsQueue,1,&submitInfo,inFlightFences[currentFrame])!=VK_SUCCESS){fprintf(stderr,"Failedtosubmitdrawcommandbuffer\n");exit(EXIT_FAILURE);}//3.PresenttheimageVkPresentInfoKHRpresentInfo={0};presentInfo.sType=VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;presentInfo.waitSemaphoreCount=1;presentInfo.pWaitSemaphores=signalSemaphores;VkSwapchainKHRswapChains[]={swapChain};presentInfo.swapchainCount=1;presentInfo.pSwapchains=swapChains;presentInfo.pImageIndices=&imageIndex;vkQueuePresentKHR(presentQueue,&presentInfo);currentFrame=(currentFrame+1)%MAX_FRAMES_IN_FLIGHT;}//Cleanup//WaitforthelogicaldevicetofinishoperationsbeforecleanupvkDeviceWaitIdle(device);//Cleanup:Synchronizationobjectsfor(size_ti=0;i<MAX_FRAMES_IN_FLIGHT;i++){vkDestroySemaphore(device,renderFinishedSemaphores[i],NULL);vkDestroySemaphore(device,imageAvailableSemaphores[i],NULL);vkDestroyFence(device,inFlightFences[i],NULL);}free(renderFinishedSemaphores);free(imageAvailableSemaphores);free(inFlightFences);//Cleanup:CommandBuffersandCommandPoolvkFreeCommandBuffers(device,commandPool,swapChainImageCount,commandBuffers);free(commandBuffers);vkDestroyCommandPool(device,commandPool,NULL);//Cleanup:Framebuffersfor(uint32_ti=0;i<swapChainImageCount;i++){vkDestroyFramebuffer(device,swapChainFramebuffers[i],NULL);}free(swapChainFramebuffers);//Cleanup:VertexandIndexBufferanditsassociatedmemoryvkDestroyBuffer(device,vertexBuffer,NULL);vkDestroyBuffer(device,indexBuffer,NULL);vkFreeMemory(device,indexBufferMemory,NULL);vkFreeMemory(device,vertexBufferMemory,NULL);//Cleanup:ShaderModules,Pipeline,RenderPass,ImageViews,SwapChainfree(vertexShaderCode);free(fragmentShaderCode);vkDestroyPipeline(device,graphicsPipeline,NULL);vkDestroyPipelineLayout(device,pipelineLayout,NULL);vkDestroyRenderPass(device,renderPass,NULL);//UBOandDescriptorrelatedcleanupvkDestroyDescriptorPool(device,descriptorPool,NULL);vkDestroyDescriptorSetLayout(device,descriptorSetLayout,NULL);for(uint32_ti=0;i<swapChainImageCount;i++){vkDestroyBuffer(device,uniformBuffers[i],NULL);vkFreeMemory(device,uniformBufferMemory[i],NULL);}for(uint32_ti=0;i<swapChainImageCount;i++){vkDestroyImageView(device,swapChainImageViews[i],NULL);}free(swapChainImageViews);vkDestroySwapchainKHR(device,swapChain,NULL);//Cleanup:LogicalDevice,Surface,VulkanInstance,GLFWWindowvkDestroyDevice(device,NULL);vkDestroySurfaceKHR(instance,surface,NULL);vkDestroyInstance(instance,NULL);glfwDestroyWindow(window);glfwTerminate();return0;}